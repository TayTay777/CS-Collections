A subclass in smallTalk is like a class in java
To create a subclass in smallTalk,
Object subclass: <nameOfSubClass>

The period is used to end statements.

The carot "^" is used instead of "return" like in java

method names end with a colon. 
Example: 
methodName: 
It is uneccessary to state a return type for the method that is being created.

Example of seq method from sum.st
    sum: seq [
        seq do: [ :v | s:=s+v ].
        ^s
    ]

To call a subclasses method in smallTalk, create the object 
<objectName>:=<nameOfSubClass> new. 
Then call the object name, followed by the method, then a semicolon with the parameters of the method afterward within parenthesis.
(<nameOfObject> <nameOfMethod>: <methodsParameters>)

Instead of curly braces, smallTalk uses square braces. " != {}; == [] "

The entire body of the <nameOfSubClass> act as parameters to the Oject method subclass:.

Constructor:
In java, you have to create an object by calling new, in smallTalk new must be a class method. 

Example:

    "A constructor (e.g., new) must be a class method."
    <nameOfSubClass> class [
        new [
            ^super new <initializerMethodForVariables>
        ]
    ]
    
